generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String   @map("first_name") @db.VarChar(100)
  lastName  String   @map("last_name") @db.VarChar(100)
  email     String   @unique @db.VarChar(150)
  password  String   @db.VarChar(100)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role    UserRoles @default(USER)
  ratings Rating[]

  @@map("users")
}

model RestoreAccountToken {
  // User id
  id        String   @id @default(uuid())
  email     String   @db.VarChar(150)
  token     String
  createdAt DateTime @default(now()) @map("created_at")

  @@map("restore_account_tokens")
}

model Place {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(100)
  description String   @db.VarChar(1000)
  address     String   @db.VarChar(500)
  phone       String   @map("phone_number")
  email       String   @unique @map("email_address")
  longitude   Float    @default(-41.02701572063517)
  latitude    Float    @default(35.06476733179137)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  pictures Picture[]

  places           NearbyPlace[]      @relation(name: "places")
  nearbyPlaces     NearbyPlace[]      @relation(name: "nearbyPlaces")
  placeCategoryMap PlaceCategoryMap[]
  ratings          Rating[]

  @@map("places")
}

model Rating {
  id        String   @id @default(uuid())
  value     Int      @map("rating_value")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  placeId String @map("place_id")
  place   Place  @relation(fields: [placeId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@map("ratings")
}

model NearbyPlace {
  id String @id @default(uuid())

  placeId String @map("place_id")
  place   Place  @relation("places", fields: [placeId], references: [id])

  nearybyPlaceId String @map("nearby_place_id")
  nearbyPlace    Place  @relation("nearbyPlaces", fields: [nearybyPlaceId], references: [id])

  @@unique([placeId, nearybyPlaceId])
  @@map("nearby_places")
}

model PlaceCategoryMap {
  id      String @id @default(uuid())
  place   Place  @relation(fields: [placeId], references: [id])
  placeId String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@map("place_category_maps")
}

model Category {
  id               String             @id @default(uuid()) @map("category_id")
  title            String             @db.VarChar(100)
  placeCategoryMap PlaceCategoryMap[]
}

model Picture {
  id        Int      @id @default(autoincrement())
  fileName  String   @map("file_name")
  createdAt DateTime @default(now()) @map("created_at")

  placeId String @map("place_id")
  place   Place  @relation(fields: [placeId], references: [id])

  @@map("pictures")
}

enum UserRoles {
  ADMIN
  USER
}
